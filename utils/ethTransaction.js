import { ethers } from "ethers";

// –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫ –¥–ª—è ethers@5.x
const provider = new ethers.providers.JsonRpcProvider("http://127.0.0.1:8545");

export const sendTransaction = async ({ to, amount, message }) => {
  try {
    console.log(`üîç –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–æ: ${to}, —Å—É–º–∞: ${amount} ETH`);

    // –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç signer –¥–ª—è –ø—ñ–¥–ø–∏—Å–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    const signer = provider.getSigner();

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
    const tx = await signer.sendTransaction({
      to,
      value: ethers.utils.parseEther(amount), // –î–ª—è ethers@5.x –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ethers.utils.parseEther
      data: ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message || "")),
    });

    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ö–µ—à: ${tx.hash}`);
    console.log(`üëâ –î–æ–≤–∂–∏–Ω–∞ —Ö–µ—à–∞: ${tx.hash.length}`);

    if (tx.hash.length !== 66) {
      console.error(`‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞ (–æ—Ç—Ä–∏–º–∞–Ω–æ ${tx.hash.length} —Å–∏–º–≤–æ–ª—ñ–≤): ${tx.hash}`);
      throw new Error(`Invalid hash length: ${tx.hash.length}`);
    }

    // –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ –º–µ—Ä–µ–∂—ñ
    const receipt = await tx.wait();
    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ —É –±–ª–æ—Ü—ñ ${receipt.blockNumber}`);

    return tx.hash;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:', error.message);
    throw new Error(`Transaction failed: ${error.message}`);
  }
};

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
export const getTransactionStatus = async (txHash) => {
  try {
    console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: ${txHash}`);

    if (!txHash || txHash.length !== 66 || !txHash.startsWith('0x')) {
      throw new Error(`Invalid transaction hash format: ${txHash}`);
    }

    const receipt = await provider.getTransactionReceipt(txHash);

    if (receipt) {
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: ${receipt.status === 1 ? 'Success' : 'Failed'}`);
      return {
        status: receipt.status === 1 ? 'success' : 'failed',
        blockNumber: receipt.blockNumber,
        gasUsed: receipt.gasUsed.toString(),
        from: receipt.from,
        to: receipt.to,
        hash: receipt.transactionHash,
      };
    } else {
      console.log(`‚åõ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —â–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è...`);
      return { status: 'pending' };
    }
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: ${error.message}`);
    throw new Error(`Failed to fetch transaction status: ${error.message}`);
  }
};

export { provider };
