import { useState } from 'react';

const Wallet = () => {
  const [address, setAddress] = useState<string>('');
  const [balance, setBalance] = useState<string | null>(null);
  const [transactionHash, setTransactionHash] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
  const getBalance = async () => {
    setError(null);
    setBalance(null);
    try {
      const response = await fetch(`http://localhost:5000/balance/${address.trim()}`);
      const data = await response.json();
      if (response.ok) {
        setBalance(data.balance);
      } else {
        setError(data.error);
      }
    } catch (err) {
      setError('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  };

  // ‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
  const sendTransaction = async () => {
    setError(null);
    setTransactionHash(null);
    try {
      const response = await fetch('http://localhost:5000/sendTransaction', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          transaction: {
            to: address.trim(),
            amount: '0.01' // –¥–ª—è —Ç–µ—Å—Ç—É
          },
        }),
      });
      const data = await response.json();
      if (response.ok) {
        setTransactionHash(data.txHash);
      } else {
        setError(data.error);
      }
    } catch (err) {
      setError('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  };

  return (
    <div style={{ padding: '20px', fontFamily: 'Arial' }}>
      <h2>üîê Wallet Interface</h2>

      {/* –í–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ */}
      <input
        type="text"
        placeholder="–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è"
        value={address}
        onChange={(e) => setAddress(e.target.value)}
        style={{ padding: '10px', width: '80%', marginBottom: '10px' }}
      />

      {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É */}
      <div>
        <button onClick={getBalance} style={{ marginRight: '10px' }}>
          –û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å
        </button>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó */}
        <button onClick={sendTransaction}>
          –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ 0.01 ETH
        </button>
      </div>

      {/* –í–∏–≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É */}
      {balance !== null && (
        <p>üí∞ –ë–∞–ª–∞–Ω—Å: {balance} ETH</p>
      )}

      {/* –í–∏–≤—ñ–¥ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó */}
      {transactionHash && (
        <p>‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: {transactionHash}</p>
      )}

      {/* –í–∏–≤—ñ–¥ –ø–æ–º–∏–ª–æ–∫ */}
      {error && (
        <p style={{ color: 'red' }}>‚ùå {error}</p>
      )}
    </div>
  );
};

export default Wallet;
