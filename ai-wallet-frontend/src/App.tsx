import { useState, useEffect } from 'react';
import { ethers } from 'ethers';


function App() {
  const [balance, setBalance] = useState('');
  const [toAddress, setToAddress] = useState('');
  const [amount, setAmount] = useState('');
  const [message, setMessage] = useState('');
  const [status, setStatus] = useState('');
  const [txHash, setTxHash] = useState('');
  const [txStatus, setTxStatus] = useState('');

  // ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞–¥—Ä–µ—Å–∏
  const isValidAddress = (address: string) => {
    try {
      return ethers.utils.getAddress(address.trim());
    } catch {
      return false;
    }
  };

  // ‚úÖ –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≤ –æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ
  const handleError = (error: any) => {
    if (error.message.includes('insufficient funds')) {
      setStatus('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤');
    } else if (error.message.includes('network error')) {
      setStatus('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ –º–µ—Ä–µ–∂–µ—é');
    } else {
      console.error('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞:', error);
      setStatus(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
  };
  

  // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
  const getBalance = async () => {
    if (!toAddress) {
      setStatus('‚ùå –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É');
      return;
    }

    const validatedAddress = isValidAddress(toAddress);
    if (!validatedAddress) {
      setStatus('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏');
      return;
    }

    try {
      const response = await fetch(
        `${import.meta.env.VITE_BACKEND_URL}/balance/${validatedAddress}`
      );

      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

      const data = await response.json();
      setBalance(parseFloat(data.balance).toFixed(4));
      setStatus(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏–º–∞–Ω–æ: ${parseFloat(data.balance).toFixed(4)} ETH`);
    } catch (error: any) {
      handleError(error);
    }
  };

  // ‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
  const sendTransaction = async () => {
    if (!toAddress || !amount) {
      setStatus('‚ùå –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É —Ç–∞ —Å—É–º—É');
      return;
    }

    try {
      const response = await fetch(
        `${import.meta.env.VITE_BACKEND_URL}/sendTransaction`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            to: toAddress.trim(),
            amount: amount.trim(),
            message: message.trim(),
          }),
        }
      );

      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

      const data = await response.json();
      if (data.hash) {
        setTxHash(data.hash);
        setStatus(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: ${data.hash}`);
        checkTransactionStatus(data.hash); // ‚úÖ –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
      } else {
        setStatus(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${data.error}`);
      }
    } catch (error: any) {
      handleError(error);
    }
  };

  // ‚úÖ –õ–æ–≥—ñ–∫–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
  const checkTransactionStatus = async (hash: string) => {
    try {
      const response = await fetch(`${import.meta.env.VITE_BACKEND_URL}/transaction-status/${hash}`);
      const data = await response.json();
  
      if (data.status === 'success' || data.status === 'failed') {
        setTxStatus(data.status);
        setStatus(`‚úÖ –°—Ç–∞—Ç—É—Å: ${data.status}`);
        
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        const balanceResponse = await fetch(`${import.meta.env.VITE_BACKEND_URL}/balance/${toAddress}`);
        const balanceData = await balanceResponse.json();
        setBalance(parseFloat(balanceData.balance).toFixed(4));
      } else {
        setTimeout(() => checkTransactionStatus(hash), 3000);
      }
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É:", error);
    }
  };
  

  // ‚úÖ –ü–æ—Å—Ç—ñ–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
  useEffect(() => {
    let intervalId: NodeJS.Timeout;

    if (txHash) {
      intervalId = setInterval(async () => {
        try {
          const response = await fetch(
            `${import.meta.env.VITE_BACKEND_URL}/transaction-status/${txHash}`
          );
          if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

          const data = await response.json();
          setTxStatus(data.status);

          if (data.status === 'success' || data.status === 'failed') {
            clearInterval(intervalId);
            await getBalance(); // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
          }
        } catch (error) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:', error);
          clearInterval(intervalId);
        }
      }, 5000);
    }

    return () => clearInterval(intervalId);
  }, [txHash]);

  return (
    <div className="app">
      <div className="form">
        <button onClick={getBalance}>Get Balance</button>
        {balance && <p>Balance: {balance} ETH</p>}

        <input
          type="text"
          placeholder="Address"
          value={toAddress}
          onChange={(e) => setToAddress(e.target.value)}
        />
        <input
          type="text"
          placeholder="Amount"
          value={amount}
          onChange={(e) => setAmount(e.target.value)}
        />
        <input
          type="text"
          placeholder="Message"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
        />

        <button onClick={sendTransaction}>Send Transaction</button>

        {/* ‚úÖ –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å—Ç–∞—Ç—É—Å */}
        {status && (
        <div className={`status ${txStatus}`}>
          {status}
        </div>
        )}


        {/* ‚úÖ –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó */}
        {txHash && (
          <p>
            Transaction Hash: {txHash}{' '}
            <a
              href={`https://etherscan.io/tx/${txHash}`}
              target="_blank"
              rel="noopener noreferrer"
            >
              üîó –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞ Etherscan
            </a>
          </p>
        )}

        {/* ‚úÖ –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è */}
        {txStatus && (
          <p>
            Status: {txStatus === 'success' ? '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' : '‚ùå –ù–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'}
          </p>
        )}
      </div>
    </div>
  );
}

export default App;
